/* tslint:disable */
/* eslint-disable */
/**
 * Momentum Core API
 * The momentum core api manages the core structure of momentum
 *
 * The version of the OpenAPI document: early-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ModelsApiError
 */
export interface ModelsApiError {
    /**
     * 
     * @type {string}
     * @memberof ModelsApiError
     */
    'detail'?: string;
    /**
     * 
     * @type {object}
     * @memberof ModelsApiError
     */
    'error'?: object;
    /**
     * 
     * @type {string}
     * @memberof ModelsApiError
     */
    'instance'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsApiError
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsApiError
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsApiError
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface ModelsApplication
 */
export interface ModelsApplication {
    /**
     * 
     * @type {string}
     * @memberof ModelsApplication
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsApplication
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsApplication
     */
    'repositoryName'?: string;
}
/**
 * 
 * @export
 * @interface ModelsApplicationCreateRequest
 */
export interface ModelsApplicationCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsApplicationCreateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsApplicationCreateRequest
     */
    'repositoryName'?: string;
}
/**
 * 
 * @export
 * @interface ModelsDeployment
 */
export interface ModelsDeployment {
    /**
     * 
     * @type {string}
     * @memberof ModelsDeployment
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDeployment
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDeployment
     */
    'parentStageId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDeployment
     */
    'repositoryId'?: string;
}
/**
 * 
 * @export
 * @interface ModelsDeploymentCreateRequest
 */
export interface ModelsDeploymentCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsDeploymentCreateRequest
     */
    'applicationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDeploymentCreateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDeploymentCreateRequest
     */
    'parentStageId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDeploymentCreateRequest
     */
    'repositoryName'?: string;
}
/**
 * 
 * @export
 * @interface ModelsRepository
 */
export interface ModelsRepository {
    /**
     * 
     * @type {string}
     * @memberof ModelsRepository
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRepository
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ModelsRepositoryCreateRequest
 */
export interface ModelsRepositoryCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsRepositoryCreateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRepositoryCreateRequest
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface ModelsStage
 */
export interface ModelsStage {
    /**
     * 
     * @type {string}
     * @memberof ModelsStage
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsStage
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsStage
     */
    'parentApplicationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsStage
     */
    'parentStageId'?: string;
}
/**
 * 
 * @export
 * @interface ModelsStageCreateRequest
 */
export interface ModelsStageCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsStageCreateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsStageCreateRequest
     */
    'parentApplicationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsStageCreateRequest
     */
    'parentStageId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsStageCreateRequest
     */
    'repositoryName'?: string;
}

/**
 * ApplicationsApi - axios parameter creator
 * @export
 */
export const ApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary add an application
         * @param {ModelsApplicationCreateRequest} applicationCreateRequest Create Application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationPost: async (applicationCreateRequest: ModelsApplicationCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationCreateRequest' is not null or undefined
            assertParamExists('applicationPost', 'applicationCreateRequest', applicationCreateRequest)
            const localVarPath = `/application`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applicationCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get an application of a repository by id
         * @param {string} repositoryName Repository Name
         * @param {string} applicationId Application ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryRepositoryNameApplicationIdGet: async (repositoryName: string, applicationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'repositoryName' is not null or undefined
            assertParamExists('repositoryRepositoryNameApplicationIdGet', 'repositoryName', repositoryName)
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('repositoryRepositoryNameApplicationIdGet', 'applicationId', applicationId)
            const localVarPath = `/repository/{repositoryName}/{applicationId}`
                .replace(`{${"repositoryName"}}`, encodeURIComponent(String(repositoryName)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get all applications of a repository
         * @param {string} repositoryName Repository Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryRepositoryNameApplicationsGet: async (repositoryName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'repositoryName' is not null or undefined
            assertParamExists('repositoryRepositoryNameApplicationsGet', 'repositoryName', repositoryName)
            const localVarPath = `/repository/{repositoryName}/applications`
                .replace(`{${"repositoryName"}}`, encodeURIComponent(String(repositoryName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationsApi - functional programming interface
 * @export
 */
export const ApplicationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary add an application
         * @param {ModelsApplicationCreateRequest} applicationCreateRequest Create Application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationPost(applicationCreateRequest: ModelsApplicationCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationPost(applicationCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get an application of a repository by id
         * @param {string} repositoryName Repository Name
         * @param {string} applicationId Application ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryRepositoryNameApplicationIdGet(repositoryName: string, applicationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.repositoryRepositoryNameApplicationIdGet(repositoryName, applicationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get all applications of a repository
         * @param {string} repositoryName Repository Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryRepositoryNameApplicationsGet(repositoryName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsApplication>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.repositoryRepositoryNameApplicationsGet(repositoryName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApplicationsApi - factory interface
 * @export
 */
export const ApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationsApiFp(configuration)
    return {
        /**
         * 
         * @summary add an application
         * @param {ModelsApplicationCreateRequest} applicationCreateRequest Create Application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationPost(applicationCreateRequest: ModelsApplicationCreateRequest, options?: any): AxiosPromise<ModelsApplication> {
            return localVarFp.applicationPost(applicationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get an application of a repository by id
         * @param {string} repositoryName Repository Name
         * @param {string} applicationId Application ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryRepositoryNameApplicationIdGet(repositoryName: string, applicationId: string, options?: any): AxiosPromise<ModelsApplication> {
            return localVarFp.repositoryRepositoryNameApplicationIdGet(repositoryName, applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get all applications of a repository
         * @param {string} repositoryName Repository Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryRepositoryNameApplicationsGet(repositoryName: string, options?: any): AxiosPromise<Array<ModelsApplication>> {
            return localVarFp.repositoryRepositoryNameApplicationsGet(repositoryName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */
export class ApplicationsApi extends BaseAPI {
    /**
     * 
     * @summary add an application
     * @param {ModelsApplicationCreateRequest} applicationCreateRequest Create Application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public applicationPost(applicationCreateRequest: ModelsApplicationCreateRequest, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).applicationPost(applicationCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get an application of a repository by id
     * @param {string} repositoryName Repository Name
     * @param {string} applicationId Application ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public repositoryRepositoryNameApplicationIdGet(repositoryName: string, applicationId: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).repositoryRepositoryNameApplicationIdGet(repositoryName, applicationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get all applications of a repository
     * @param {string} repositoryName Repository Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public repositoryRepositoryNameApplicationsGet(repositoryName: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).repositoryRepositoryNameApplicationsGet(repositoryName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeploymentsApi - axios parameter creator
 * @export
 */
export const DeploymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get a deployment of a repository by id
         * @param {ModelsDeploymentCreateRequest} deploymentCreateRequest Create Deployment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploymentPost: async (deploymentCreateRequest: ModelsDeploymentCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deploymentCreateRequest' is not null or undefined
            assertParamExists('deploymentPost', 'deploymentCreateRequest', deploymentCreateRequest)
            const localVarPath = `/deployment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deploymentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get a deployment of a repository by id
         * @param {string} repositoryName Repository Name
         * @param {string} deploymentId Deployment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryRepositoryNameAppStageDeploymentDeploymentIdGet: async (repositoryName: string, deploymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'repositoryName' is not null or undefined
            assertParamExists('repositoryRepositoryNameAppStageDeploymentDeploymentIdGet', 'repositoryName', repositoryName)
            // verify required parameter 'deploymentId' is not null or undefined
            assertParamExists('repositoryRepositoryNameAppStageDeploymentDeploymentIdGet', 'deploymentId', deploymentId)
            const localVarPath = `/repository/{repositoryName}/app/stage/deployment/{deploymentId}`
                .replace(`{${"repositoryName"}}`, encodeURIComponent(String(repositoryName)))
                .replace(`{${"deploymentId"}}`, encodeURIComponent(String(deploymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get deployments
         * @param {string} repositoryName Repository Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryRepositoryNameDeploymentsGet: async (repositoryName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'repositoryName' is not null or undefined
            assertParamExists('repositoryRepositoryNameDeploymentsGet', 'repositoryName', repositoryName)
            const localVarPath = `/repository/{repositoryName}/deployments`
                .replace(`{${"repositoryName"}}`, encodeURIComponent(String(repositoryName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeploymentsApi - functional programming interface
 * @export
 */
export const DeploymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeploymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get a deployment of a repository by id
         * @param {ModelsDeploymentCreateRequest} deploymentCreateRequest Create Deployment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deploymentPost(deploymentCreateRequest: ModelsDeploymentCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsDeployment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deploymentPost(deploymentCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get a deployment of a repository by id
         * @param {string} repositoryName Repository Name
         * @param {string} deploymentId Deployment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryRepositoryNameAppStageDeploymentDeploymentIdGet(repositoryName: string, deploymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsDeployment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.repositoryRepositoryNameAppStageDeploymentDeploymentIdGet(repositoryName, deploymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get deployments
         * @param {string} repositoryName Repository Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryRepositoryNameDeploymentsGet(repositoryName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsDeployment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.repositoryRepositoryNameDeploymentsGet(repositoryName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeploymentsApi - factory interface
 * @export
 */
export const DeploymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeploymentsApiFp(configuration)
    return {
        /**
         * 
         * @summary get a deployment of a repository by id
         * @param {ModelsDeploymentCreateRequest} deploymentCreateRequest Create Deployment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploymentPost(deploymentCreateRequest: ModelsDeploymentCreateRequest, options?: any): AxiosPromise<ModelsDeployment> {
            return localVarFp.deploymentPost(deploymentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get a deployment of a repository by id
         * @param {string} repositoryName Repository Name
         * @param {string} deploymentId Deployment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryRepositoryNameAppStageDeploymentDeploymentIdGet(repositoryName: string, deploymentId: string, options?: any): AxiosPromise<ModelsDeployment> {
            return localVarFp.repositoryRepositoryNameAppStageDeploymentDeploymentIdGet(repositoryName, deploymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get deployments
         * @param {string} repositoryName Repository Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryRepositoryNameDeploymentsGet(repositoryName: string, options?: any): AxiosPromise<Array<ModelsDeployment>> {
            return localVarFp.repositoryRepositoryNameDeploymentsGet(repositoryName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeploymentsApi - object-oriented interface
 * @export
 * @class DeploymentsApi
 * @extends {BaseAPI}
 */
export class DeploymentsApi extends BaseAPI {
    /**
     * 
     * @summary get a deployment of a repository by id
     * @param {ModelsDeploymentCreateRequest} deploymentCreateRequest Create Deployment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentsApi
     */
    public deploymentPost(deploymentCreateRequest: ModelsDeploymentCreateRequest, options?: AxiosRequestConfig) {
        return DeploymentsApiFp(this.configuration).deploymentPost(deploymentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get a deployment of a repository by id
     * @param {string} repositoryName Repository Name
     * @param {string} deploymentId Deployment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentsApi
     */
    public repositoryRepositoryNameAppStageDeploymentDeploymentIdGet(repositoryName: string, deploymentId: string, options?: AxiosRequestConfig) {
        return DeploymentsApiFp(this.configuration).repositoryRepositoryNameAppStageDeploymentDeploymentIdGet(repositoryName, deploymentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get deployments
     * @param {string} repositoryName Repository Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentsApi
     */
    public repositoryRepositoryNameDeploymentsGet(repositoryName: string, options?: AxiosRequestConfig) {
        return DeploymentsApiFp(this.configuration).repositoryRepositoryNameDeploymentsGet(repositoryName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RepositoriesApi - axios parameter creator
 * @export
 */
export const RepositoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * load all repositories managed by this instance
         * @summary load repositories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoriesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/repositories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * adds a new repository to the instance
         * @summary add a new repository
         * @param {ModelsRepositoryCreateRequest} repositoryCreateRequest Create Repository
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryPost: async (repositoryCreateRequest: ModelsRepositoryCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'repositoryCreateRequest' is not null or undefined
            assertParamExists('repositoryPost', 'repositoryCreateRequest', repositoryCreateRequest)
            const localVarPath = `/repository`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(repositoryCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get a repository
         * @param {string} repositoryName Repository Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryRepositoryNameGet: async (repositoryName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'repositoryName' is not null or undefined
            assertParamExists('repositoryRepositoryNameGet', 'repositoryName', repositoryName)
            const localVarPath = `/repository/{repositoryName}`
                .replace(`{${"repositoryName"}}`, encodeURIComponent(String(repositoryName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RepositoriesApi - functional programming interface
 * @export
 */
export const RepositoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RepositoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * load all repositories managed by this instance
         * @summary load repositories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoriesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsRepository>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.repositoriesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * adds a new repository to the instance
         * @summary add a new repository
         * @param {ModelsRepositoryCreateRequest} repositoryCreateRequest Create Repository
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryPost(repositoryCreateRequest: ModelsRepositoryCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsRepository>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.repositoryPost(repositoryCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get a repository
         * @param {string} repositoryName Repository Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryRepositoryNameGet(repositoryName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsRepository>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.repositoryRepositoryNameGet(repositoryName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RepositoriesApi - factory interface
 * @export
 */
export const RepositoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RepositoriesApiFp(configuration)
    return {
        /**
         * load all repositories managed by this instance
         * @summary load repositories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoriesGet(options?: any): AxiosPromise<Array<ModelsRepository>> {
            return localVarFp.repositoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * adds a new repository to the instance
         * @summary add a new repository
         * @param {ModelsRepositoryCreateRequest} repositoryCreateRequest Create Repository
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryPost(repositoryCreateRequest: ModelsRepositoryCreateRequest, options?: any): AxiosPromise<ModelsRepository> {
            return localVarFp.repositoryPost(repositoryCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get a repository
         * @param {string} repositoryName Repository Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryRepositoryNameGet(repositoryName: string, options?: any): AxiosPromise<ModelsRepository> {
            return localVarFp.repositoryRepositoryNameGet(repositoryName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RepositoriesApi - object-oriented interface
 * @export
 * @class RepositoriesApi
 * @extends {BaseAPI}
 */
export class RepositoriesApi extends BaseAPI {
    /**
     * load all repositories managed by this instance
     * @summary load repositories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoriesApi
     */
    public repositoriesGet(options?: AxiosRequestConfig) {
        return RepositoriesApiFp(this.configuration).repositoriesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * adds a new repository to the instance
     * @summary add a new repository
     * @param {ModelsRepositoryCreateRequest} repositoryCreateRequest Create Repository
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoriesApi
     */
    public repositoryPost(repositoryCreateRequest: ModelsRepositoryCreateRequest, options?: AxiosRequestConfig) {
        return RepositoriesApiFp(this.configuration).repositoryPost(repositoryCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get a repository
     * @param {string} repositoryName Repository Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoriesApi
     */
    public repositoryRepositoryNameGet(repositoryName: string, options?: AxiosRequestConfig) {
        return RepositoriesApiFp(this.configuration).repositoryRepositoryNameGet(repositoryName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StagesApi - axios parameter creator
 * @export
 */
export const StagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get a stage of a repository by id
         * @param {string} repositoryName Repository Name
         * @param {string} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryRepositoryNameAppStageStageIdGet: async (repositoryName: string, stageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'repositoryName' is not null or undefined
            assertParamExists('repositoryRepositoryNameAppStageStageIdGet', 'repositoryName', repositoryName)
            // verify required parameter 'stageId' is not null or undefined
            assertParamExists('repositoryRepositoryNameAppStageStageIdGet', 'stageId', stageId)
            const localVarPath = `/repository/{repositoryName}/app/stage/{stageId}`
                .replace(`{${"repositoryName"}}`, encodeURIComponent(String(repositoryName)))
                .replace(`{${"stageId"}}`, encodeURIComponent(String(stageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get stages
         * @param {string} repositoryName Repository Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryRepositoryNameStagesGet: async (repositoryName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'repositoryName' is not null or undefined
            assertParamExists('repositoryRepositoryNameStagesGet', 'repositoryName', repositoryName)
            const localVarPath = `/repository/{repositoryName}/stages`
                .replace(`{${"repositoryName"}}`, encodeURIComponent(String(repositoryName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary add a new stage
         * @param {ModelsStageCreateRequest} stageCreateRequest Create Stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stagePost: async (stageCreateRequest: ModelsStageCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stageCreateRequest' is not null or undefined
            assertParamExists('stagePost', 'stageCreateRequest', stageCreateRequest)
            const localVarPath = `/stage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stageCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StagesApi - functional programming interface
 * @export
 */
export const StagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get a stage of a repository by id
         * @param {string} repositoryName Repository Name
         * @param {string} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryRepositoryNameAppStageStageIdGet(repositoryName: string, stageId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsDeployment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.repositoryRepositoryNameAppStageStageIdGet(repositoryName, stageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get stages
         * @param {string} repositoryName Repository Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repositoryRepositoryNameStagesGet(repositoryName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsStage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.repositoryRepositoryNameStagesGet(repositoryName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary add a new stage
         * @param {ModelsStageCreateRequest} stageCreateRequest Create Stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stagePost(stageCreateRequest: ModelsStageCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsStage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stagePost(stageCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StagesApi - factory interface
 * @export
 */
export const StagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StagesApiFp(configuration)
    return {
        /**
         * 
         * @summary get a stage of a repository by id
         * @param {string} repositoryName Repository Name
         * @param {string} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryRepositoryNameAppStageStageIdGet(repositoryName: string, stageId: string, options?: any): AxiosPromise<ModelsDeployment> {
            return localVarFp.repositoryRepositoryNameAppStageStageIdGet(repositoryName, stageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get stages
         * @param {string} repositoryName Repository Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repositoryRepositoryNameStagesGet(repositoryName: string, options?: any): AxiosPromise<Array<ModelsStage>> {
            return localVarFp.repositoryRepositoryNameStagesGet(repositoryName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary add a new stage
         * @param {ModelsStageCreateRequest} stageCreateRequest Create Stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stagePost(stageCreateRequest: ModelsStageCreateRequest, options?: any): AxiosPromise<ModelsStage> {
            return localVarFp.stagePost(stageCreateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StagesApi - object-oriented interface
 * @export
 * @class StagesApi
 * @extends {BaseAPI}
 */
export class StagesApi extends BaseAPI {
    /**
     * 
     * @summary get a stage of a repository by id
     * @param {string} repositoryName Repository Name
     * @param {string} stageId Stage ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public repositoryRepositoryNameAppStageStageIdGet(repositoryName: string, stageId: string, options?: AxiosRequestConfig) {
        return StagesApiFp(this.configuration).repositoryRepositoryNameAppStageStageIdGet(repositoryName, stageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get stages
     * @param {string} repositoryName Repository Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public repositoryRepositoryNameStagesGet(repositoryName: string, options?: AxiosRequestConfig) {
        return StagesApiFp(this.configuration).repositoryRepositoryNameStagesGet(repositoryName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary add a new stage
     * @param {ModelsStageCreateRequest} stageCreateRequest Create Stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public stagePost(stageCreateRequest: ModelsStageCreateRequest, options?: AxiosRequestConfig) {
        return StagesApiFp(this.configuration).stagePost(stageCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


